{
  "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "baseCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "name": "AssetSourceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "BaseCurrencySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_CURRENCY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_CURRENCY_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "getAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getSourceOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "name": "setAssetSources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
  "receipt": {
    "to": null,
    "from": "0x3141f8D6BE4e4d9137577798C1e127Db81D196d7",
    "contractAddress": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
    "transactionIndex": 71,
    "gasUsed": "909790",
    "logsBloom": "0x
    "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e",
    "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000c527c4003b0554a5703fa666d7d45db205e3de99",
          "0x000000000000000000000000bdbbde90e0c958f36d8615d59dd1196bec4c77c0"
        ],
        "data": "0x",
        "logIndex": 289,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000027b143919ae292f61386aa6de06f892e1c947d9",
          "0x000000000000000000000000cc62829fbc916396f2e192242937ee4423f8b2f7"
        ],
        "data": "0x",
        "logIndex": 290,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x0000000000000000000000006a9d4913ac8266a1debcfc6d5b6ea275fd19cd85",
          "0x0000000000000000000000007f4e8f4a1dc310e05bcd93239f2edd334d7c33eb"
        ],
        "data": "0x",
        "logIndex": 291,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x0000000000000000000000008520e10ea26c761a98be06ea252cd30e83f4fb4b",
          "0x000000000000000000000000224c06b0b016c02aef287e0624a9cafeded9a988"
        ],
        "data": "0x",
        "logIndex": 292,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000218b00cfb6f4ae38c43c83d1e6eba8f25fd2324c",
          "0x00000000000000000000000076659f238399e98434a1b2fae7ca8f33888276b4"
        ],
        "data": "0x",
        "logIndex": 293,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x00000000000000000000000062d8460025de81982c843b14e7f18ff2273ea491",
          "0x000000000000000000000000195daec8d8e0859b60484b58df98b3a2d2645b51"
        ],
        "data": "0x",
        "logIndex": 294,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000784388a036cb9c8c680002f43354e856f816f844",
          "0x0000000000000000000000001bd0e271383986b72dc9eaf46e3c99774c6a01f2"
        ],
        "data": "0x",
        "logIndex": 295,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000092c325a98e50be78a140cd043d49904ffb8ea1f",
          "0x00000000000000000000000068bbd2b5688ae4eca4350939f72e1cd7f6c7ce5f"
        ],
        "data": "0x",
        "logIndex": 296,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x0000000000000000000000000fdcbabb76c0a60a9f28e60940027c48df88347a",
          "0x0000000000000000000000003fd9b14fb59b02503ae60bd26298523f959ddff3"
        ],
        "data": "0x",
        "logIndex": 297,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 3684663,
        "transactionHash": "0x405472384833ddff2b89dfc9af51df2e89e7667befe8bc9c1880ae1a53ce1a88",
        "address": "0xeD370Ba12d702466e10cD8eFCEa0389094D889B5",
        "topics": [
          "0xe27c4c1372396a3d15a9922f74f9dfc7c72b1ad6d63868470787249c356454c1",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000005f5e100",
        "logIndex": 298,
        "blockHash": "0x797a252d3bb34d6e2467477c2d8c89304e854114571af1d884318a1a3ee9e50e"
      }
    ],
    "blockNumber": 3684663,
    "cumulativeGasUsed": "12673047",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD5C33721220Bc75f0BBD970E64D5807350DEB3C5",
    [
      "0xc527C4003B0554A5703FA666D7D45dB205e3de99",
      "0x027b143919AE292f61386AA6dE06f892e1C947d9",
      "0x6A9d4913AC8266A1dEbCfC6d5B6Ea275Fd19cD85",
      "0x8520E10eA26c761a98bE06eA252cd30E83f4FB4B",
      "0x218B00cfb6f4ae38c43c83d1E6eBA8f25FD2324C",
      "0x62D8460025DE81982C843B14E7F18Ff2273ea491",
      "0x784388A036cb9c8c680002F43354E856f816F844",
      "0x092c325a98e50BE78A140cD043D49904fFB8Ea1F",
      "0x0fdcBABb76c0A60a9F28e60940027C48dF88347A"
    ],
    [
      "0xbDBbDe90E0C958f36d8615D59Dd1196BEC4C77C0",
      "0xcC62829FBc916396f2e192242937Ee4423F8B2f7",
      "0x7F4e8f4A1dc310E05bCD93239f2eDd334d7c33Eb",
      "0x224c06B0B016C02aef287E0624a9cAFEDeD9a988",
      "0x76659F238399e98434A1B2FaE7cA8F33888276b4",
      "0x195Daec8d8E0859B60484b58DF98b3A2d2645B51",
      "0x1Bd0e271383986b72Dc9EAF46E3C99774c6a01F2",
      "0x68bBd2B5688aE4ecA4350939f72E1Cd7F6c7ce5f",
      "0x3FD9b14fb59B02503ae60bD26298523F959DdFf3"
    ],
    "0x0000000000000000000000000000000000000000",
    "100000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "6ab0e5be5869d09fab1964f4f6b16b9c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"BaseCurrencySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CURRENCY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CURRENCY_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Hope\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"assets\":\"The addresses of the assets\",\"baseCurrency\":\"The base currency used for the price quotes. If USD is used, base currency is 0x0\",\"baseCurrencyUnit\":\"The unit of the base currency\",\"provider\":\"The address of the new PoolAddressesProvider\",\"sources\":\"The address of the source of each asset\"}},\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The price of the asset\"}},\"getAssetsPrices(address[])\":{\"params\":{\"assets\":\"The list of assets addresses\"},\"returns\":{\"_0\":\"The prices of the given assets\"}},\"getSourceOfAsset(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The address of the source\"}},\"setAssetSources(address[],address[])\":{\"params\":{\"assets\":\"The addresses of the assets\",\"sources\":\"The addresses of the price sources\"}}},\"stateVariables\":{\"ADDRESSES_PROVIDER\":{\"return\":\"The address of the PoolAddressesProvider contract\",\"returns\":{\"_0\":\"The address of the PoolAddressesProvider contract\"}},\"BASE_CURRENCY\":{\"details\":\"Address 0x0 is reserved for USD as base currency.\",\"return\":\"Returns the base currency address.\",\"returns\":{\"_0\":\"Returns the base currency address.\"}},\"BASE_CURRENCY_UNIT\":{\"details\":\"1 ether for ETH, 1e8 for USD.\",\"return\":\"Returns the base currency unit.\",\"returns\":{\"_0\":\"Returns the base currency unit.\"}}},\"title\":\"HopeFallbackOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"Returns the PoolAddressesProvider\"},\"BASE_CURRENCY()\":{\"notice\":\"Returns the base currency address\"},\"BASE_CURRENCY_UNIT()\":{\"notice\":\"Returns the base currency unit\"},\"constructor\":{\"notice\":\"Constructor\"},\"getAssetPrice(address)\":{\"notice\":\"Returns the asset price in the base currency\"},\"getAssetsPrices(address[])\":{\"notice\":\"Returns a list of prices from a list of assets addresses\"},\"getSourceOfAsset(address)\":{\"notice\":\"Returns the address of the source for an asset address\"},\"setAssetSources(address[],address[])\":{\"notice\":\"Sets or replaces price sources of assets\"}},\"notice\":\"Contract to get asset prices, manage price sources - Use of Chainlink Aggregators as first source of price - Owned by the Hope governance\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HopeFallbackOracle.sol\":\"HopeFallbackOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/HopeFallbackOracle.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {AggregatorInterface} from './dependencies/chainlink/AggregatorInterface.sol';\\nimport {Errors} from './libraries/Errors.sol';\\nimport {IACLManager} from './interfaces/IACLManager.sol';\\nimport {IPoolAddressesProvider} from './interfaces/IPoolAddressesProvider.sol';\\nimport {IHopeFallbackOracle} from './interfaces/IHopeFallbackOracle.sol';\\n\\n/**\\n * @title HopeFallbackOracle\\n * @author Hope\\n * @notice Contract to get asset prices, manage price sources\\n * - Use of Chainlink Aggregators as first source of price\\n * - Owned by the Hope governance\\n */\\ncontract HopeFallbackOracle is IHopeFallbackOracle {\\n  IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\n\\n  // Map of asset price sources (asset => AggregatorInterface)\\n  mapping(address => AggregatorInterface) private assetsSources;\\n\\n  address public immutable override BASE_CURRENCY;\\n  uint256 public immutable override BASE_CURRENCY_UNIT;\\n\\n  /**\\n   * @dev Only asset listing or pool admin can call functions marked by this modifier.\\n   */\\n  modifier onlyAssetListingOrPoolAdmins() {\\n    _onlyAssetListingOrPoolAdmins();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Constructor\\n   * @param provider The address of the new PoolAddressesProvider\\n   * @param assets The addresses of the assets\\n   * @param sources The address of the source of each asset\\n   * @param baseCurrency The base currency used for the price quotes. If USD is used, base currency is 0x0\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n  constructor(\\n    IPoolAddressesProvider provider,\\n    address[] memory assets,\\n    address[] memory sources,\\n    address baseCurrency,\\n    uint256 baseCurrencyUnit\\n  ) {\\n    ADDRESSES_PROVIDER = provider;\\n    _setAssetsSources(assets, sources);\\n    BASE_CURRENCY = baseCurrency;\\n    BASE_CURRENCY_UNIT = baseCurrencyUnit;\\n    emit BaseCurrencySet(baseCurrency, baseCurrencyUnit);\\n  }\\n\\n  /// @inheritdoc IHopeFallbackOracle\\n  function setAssetSources(\\n    address[] calldata assets,\\n    address[] calldata sources\\n  ) external override onlyAssetListingOrPoolAdmins {\\n    _setAssetsSources(assets, sources);\\n  }\\n\\n  /**\\n   * @notice Internal function to set the sources for each asset\\n   * @param assets The addresses of the assets\\n   * @param sources The address of the source of each asset\\n   */\\n  function _setAssetsSources(address[] memory assets, address[] memory sources) internal {\\n    require(assets.length == sources.length, Errors.INCONSISTENT_PARAMS_LENGTH);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      assetsSources[assets[i]] = AggregatorInterface(sources[i]);\\n      emit AssetSourceUpdated(assets[i], sources[i]);\\n    }\\n  }\\n\\n  function getAssetPrice(address asset) public view override returns (uint256) {\\n    AggregatorInterface source = assetsSources[asset];\\n\\n    if (asset == BASE_CURRENCY) {\\n      return BASE_CURRENCY_UNIT;\\n    } else {\\n      int256 price = source.latestAnswer();\\n      return uint256(price);\\n    }\\n  }\\n\\n  /// @inheritdoc IHopeFallbackOracle\\n  function getAssetsPrices(address[] calldata assets) external view override returns (uint256[] memory) {\\n    uint256[] memory prices = new uint256[](assets.length);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      prices[i] = getAssetPrice(assets[i]);\\n    }\\n    return prices;\\n  }\\n\\n  /// @inheritdoc IHopeFallbackOracle\\n  function getSourceOfAsset(address asset) external view override returns (address) {\\n    return address(assetsSources[asset]);\\n  }\\n\\n  function _onlyAssetListingOrPoolAdmins() internal view {\\n    IACLManager aclManager = IACLManager(ADDRESSES_PROVIDER.getACLManager());\\n    require(\\n      aclManager.isAssetListingAdmin(msg.sender) || aclManager.isPoolAdmin(msg.sender),\\n      Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x4817340186d9252df2d6f46e181ab345ee36dec6127b0ccf48a3897e55654c0f\",\"license\":\"LGPL-3.0\"},\"contracts/dependencies/chainlink/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\",\"keccak256\":\"0xbe3ed5aeefac5fc22746c676e9a5ee53cba3edd3eda52676f5271ce2afe21fb0\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IACLManager\\n * @author HopeLend\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n  /**\\n   * @notice Returns the contract address of the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the FlashBorrower role\\n   * @return The id of the FlashBorrower role\\n   */\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the Bridge role\\n   * @return The id of the Bridge role\\n   */\\n  function BRIDGE_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the AssetListingAdmin role\\n   * @return The id of the AssetListingAdmin role\\n   */\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Set the role as admin of a specific role.\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n   * @param role The role to be managed by the admin role\\n   * @param adminRole The admin role\\n   */\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as FlashBorrower\\n   * @param borrower The address of the new FlashBorrower\\n   */\\n  function addFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Removes an address as FlashBorrower\\n   * @param borrower The address of the FlashBorrower to remove\\n   */\\n  function removeFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\n   * @param borrower The address to check\\n   * @return True if the given address is FlashBorrower, false otherwise\\n   */\\n  function isFlashBorrower(address borrower) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as Bridge\\n   * @param bridge The address of the new Bridge\\n   */\\n  function addBridge(address bridge) external;\\n\\n  /**\\n   * @notice Removes an address as Bridge\\n   * @param bridge The address of the bridge to remove\\n   */\\n  function removeBridge(address bridge) external;\\n\\n  /**\\n   * @notice Returns true if the address is Bridge, false otherwise\\n   * @param bridge The address to check\\n   * @return True if the given address is Bridge, false otherwise\\n   */\\n  function isBridge(address bridge) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as AssetListingAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as AssetListingAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\n   */\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x26a68bad4080948b82a2203696c711ceeeb5e7bbcfd222856555ab9ae5d60e98\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IHopeFallbackOracle.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPriceOracleGetter} from './IPriceOracleGetter.sol';\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IHopeFallbackOracle\\n * @author Hope\\n * @notice Defines the basic interface for the Hope Oracle\\n */\\ninterface IHopeFallbackOracle is IPriceOracleGetter {\\n  /**\\n   * @dev Emitted after the base currency is set\\n   * @param baseCurrency The base currency of used for price quotes\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n  /**\\n   * @dev Emitted after the price source of an asset is updated\\n   * @param asset The address of the asset\\n   * @param source The price source of the asset\\n   */\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Sets or replaces price sources of assets\\n   * @param assets The addresses of the assets\\n   * @param sources The addresses of the price sources\\n   */\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /**\\n   * @notice Returns a list of prices from a list of assets addresses\\n   * @param assets The list of assets addresses\\n   * @return The prices of the given assets\\n   */\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns the address of the source for an asset address\\n   * @param asset The address of the asset\\n   * @return The address of the source\\n   */\\n  function getSourceOfAsset(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x099d379525e4b1d6f7a43b4a21ab623742b8f4006930f835500c7913cbe15540\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author HopeLend\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the HopeLend market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple HopeLend markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x38f1da33df9b0e41408d012e128a385ffe79ab22431815fe1e8ce3e77caa5312\",\"license\":\"LGPL-3.0\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author HopeOracle\\n * @notice Interface for the HopeOracle price oracle.\\n */\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   */\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   */\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e28d872ff5594c1c5c72a9f1e28922d335359fefbc83f0b074c380005133cbd\",\"license\":\"LGPL-3.0\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @author HopeLend\\n * @notice Defines the error messages emitted by the different contracts of the HopeLend protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n}\\n\",\"keccak256\":\"0x6fc6d9024c88bfafb6cbc0de1a88bba37d3c02f030b1603f47a6a38ebffa850b\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162000f8238038062000f828339810160408190526200003491620002f8565b6001600160a01b0385166080526200004d84846200009f565b6001600160a01b03821660a081905260c08290526040518281527fe27c4c1372396a3d15a9922f74f9dfc7c72b1ad6d63868470787249c356454c19060200160405180910390a2505050505062000426565b8051825114604051806040016040528060028152602001611b9b60f11b81525090620000e95760405162461bcd60e51b8152600401620000e0919062000398565b60405180910390fd5b5060005b825181101562000205578181815181106200010c576200010c620003e8565b60200260200101516000808584815181106200012c576200012c620003e8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508181815181106200018d576200018d620003e8565b60200260200101516001600160a01b0316838281518110620001b357620001b3620003e8565b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a380620001fc81620003fe565b915050620000ed565b505050565b6001600160a01b03811681146200022057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b805162000246816200020a565b919050565b600082601f8301126200025d57600080fd5b815160206001600160401b03808311156200027c576200027c62000223565b8260051b604051601f19603f83011681018181108482111715620002a457620002a462000223565b604052938452858101830193838101925087851115620002c357600080fd5b83870191505b84821015620002ed57620002dd8262000239565b83529183019190830190620002c9565b979650505050505050565b600080600080600060a086880312156200031157600080fd5b85516200031e816200020a565b60208701519095506001600160401b03808211156200033c57600080fd5b6200034a89838a016200024b565b955060408801519150808211156200036157600080fd5b5062000370888289016200024b565b935050606086015162000383816200020a565b80925050608086015190509295509295909350565b600060208083528351808285015260005b81811015620003c757858101830151858201604001528201620003a9565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200041f57634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c051610b19620004696000396000818160d8015261033a01526000818161018e015261030f015260008181608701526103dc0152610b196000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639d23d9f21161005b5780639d23d9f214610141578063abfd531014610161578063b3596f0714610176578063e19f47001461018957600080fd5b80630542975c146100825780638c89b64f146100d357806392bf2be014610108575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ca565b6100a9610116366004610800565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152602081905260409020541690565b61015461014f366004610870565b6101b0565b6040516100ca91906108b2565b61017461016f3660046108f6565b610265565b005b6100fa610184366004610800565b6102e0565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b606060008267ffffffffffffffff8111156101cd576101cd610962565b6040519080825280602002602001820160405280156101f6578160200160208202803683370190505b50905060005b8381101561025d5761022e85858381811061021957610219610991565b90506020020160208101906101849190610800565b82828151811061024057610240610991565b602090810291909101015280610255816109c0565b9150506101fc565b509392505050565b61026d6103d8565b6102da8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061060992505050565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8082166000818152602081905260408120549092908116917f0000000000000000000000000000000000000000000000000000000000000000909116900361035f57507f000000000000000000000000000000000000000000000000000000000000000092915050565b60008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d09190610a1f565b949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190610a38565b6040517f13ee32e000000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906313ee32e090602401602060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190610a55565b8061058e57506040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610a55565b6040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525090610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9190610a77565b60405180910390fd5b5050565b80518251146040518060400160405280600281526020017f37360000000000000000000000000000000000000000000000000000000000008152509061067c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9190610a77565b5060005b82518110156107d65781818151811061069b5761069b610991565b60200260200101516000808584815181106106b8576106b8610991565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081818151811061074a5761074a610991565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683828151811061077a5761077a610991565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a3806107ce816109c0565b915050610680565b505050565b73ffffffffffffffffffffffffffffffffffffffff811681146107fd57600080fd5b50565b60006020828403121561081257600080fd5b813561081d816107db565b9392505050565b60008083601f84011261083657600080fd5b50813567ffffffffffffffff81111561084e57600080fd5b6020830191508360208260051b850101111561086957600080fd5b9250929050565b6000806020838503121561088357600080fd5b823567ffffffffffffffff81111561089a57600080fd5b6108a685828601610824565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156108ea578351835292840192918401916001016108ce565b50909695505050505050565b6000806000806040858703121561090c57600080fd5b843567ffffffffffffffff8082111561092457600080fd5b61093088838901610824565b9096509450602087013591508082111561094957600080fd5b5061095687828801610824565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a18577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610a3157600080fd5b5051919050565b600060208284031215610a4a57600080fd5b815161081d816107db565b600060208284031215610a6757600080fd5b8151801515811461081d57600080fd5b600060208083528351808285015260005b81811015610aa457858101830151858201604001528201610a88565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea26469706673582212208fd561be7acb5dc9bd12a4fe8e6ae88c33e1a87ab2bd7e6d86381eb6d956ba0864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639d23d9f21161005b5780639d23d9f214610141578063abfd531014610161578063b3596f0714610176578063e19f47001461018957600080fd5b80630542975c146100825780638c89b64f146100d357806392bf2be014610108575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ca565b6100a9610116366004610800565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152602081905260409020541690565b61015461014f366004610870565b6101b0565b6040516100ca91906108b2565b61017461016f3660046108f6565b610265565b005b6100fa610184366004610800565b6102e0565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b606060008267ffffffffffffffff8111156101cd576101cd610962565b6040519080825280602002602001820160405280156101f6578160200160208202803683370190505b50905060005b8381101561025d5761022e85858381811061021957610219610991565b90506020020160208101906101849190610800565b82828151811061024057610240610991565b602090810291909101015280610255816109c0565b9150506101fc565b509392505050565b61026d6103d8565b6102da8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061060992505050565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8082166000818152602081905260408120549092908116917f0000000000000000000000000000000000000000000000000000000000000000909116900361035f57507f000000000000000000000000000000000000000000000000000000000000000092915050565b60008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d09190610a1f565b949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663707cd7166040518163ffffffff1660e01b8152600401602060405180830381865afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104699190610a38565b6040517f13ee32e000000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906313ee32e090602401602060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa9190610a55565b8061058e57506040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610a55565b6040518060400160405280600181526020017f350000000000000000000000000000000000000000000000000000000000000081525090610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9190610a77565b60405180910390fd5b5050565b80518251146040518060400160405280600281526020017f37360000000000000000000000000000000000000000000000000000000000008152509061067c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9190610a77565b5060005b82518110156107d65781818151811061069b5761069b610991565b60200260200101516000808584815181106106b8576106b8610991565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081818151811061074a5761074a610991565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1683828151811061077a5761077a610991565b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a3806107ce816109c0565b915050610680565b505050565b73ffffffffffffffffffffffffffffffffffffffff811681146107fd57600080fd5b50565b60006020828403121561081257600080fd5b813561081d816107db565b9392505050565b60008083601f84011261083657600080fd5b50813567ffffffffffffffff81111561084e57600080fd5b6020830191508360208260051b850101111561086957600080fd5b9250929050565b6000806020838503121561088357600080fd5b823567ffffffffffffffff81111561089a57600080fd5b6108a685828601610824565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156108ea578351835292840192918401916001016108ce565b50909695505050505050565b6000806000806040858703121561090c57600080fd5b843567ffffffffffffffff8082111561092457600080fd5b61093088838901610824565b9096509450602087013591508082111561094957600080fd5b5061095687828801610824565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a18577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610a3157600080fd5b5051919050565b600060208284031215610a4a57600080fd5b815161081d816107db565b600060208284031215610a6757600080fd5b8151801515811461081d57600080fd5b600060208083528351808285015260005b81811015610aa457858101830151858201604001528201610a88565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea26469706673582212208fd561be7acb5dc9bd12a4fe8e6ae88c33e1a87ab2bd7e6d86381eb6d956ba0864736f6c63430008110033",
  "devdoc": {
    "author": "Hope",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "assets": "The addresses of the assets",
          "baseCurrency": "The base currency used for the price quotes. If USD is used, base currency is 0x0",
          "baseCurrencyUnit": "The unit of the base currency",
          "provider": "The address of the new PoolAddressesProvider",
          "sources": "The address of the source of each asset"
        }
      },
      "getAssetPrice(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The price of the asset"
        }
      },
      "getAssetsPrices(address[])": {
        "params": {
          "assets": "The list of assets addresses"
        },
        "returns": {
          "_0": "The prices of the given assets"
        }
      },
      "getSourceOfAsset(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The address of the source"
        }
      },
      "setAssetSources(address[],address[])": {
        "params": {
          "assets": "The addresses of the assets",
          "sources": "The addresses of the price sources"
        }
      }
    },
    "stateVariables": {
      "ADDRESSES_PROVIDER": {
        "return": "The address of the PoolAddressesProvider contract",
        "returns": {
          "_0": "The address of the PoolAddressesProvider contract"
        }
      },
      "BASE_CURRENCY": {
        "details": "Address 0x0 is reserved for USD as base currency.",
        "return": "Returns the base currency address.",
        "returns": {
          "_0": "Returns the base currency address."
        }
      },
      "BASE_CURRENCY_UNIT": {
        "details": "1 ether for ETH, 1e8 for USD.",
        "return": "Returns the base currency unit.",
        "returns": {
          "_0": "Returns the base currency unit."
        }
      }
    },
    "title": "HopeFallbackOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "Returns the PoolAddressesProvider"
      },
      "BASE_CURRENCY()": {
        "notice": "Returns the base currency address"
      },
      "BASE_CURRENCY_UNIT()": {
        "notice": "Returns the base currency unit"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "getAssetPrice(address)": {
        "notice": "Returns the asset price in the base currency"
      },
      "getAssetsPrices(address[])": {
        "notice": "Returns a list of prices from a list of assets addresses"
      },
      "getSourceOfAsset(address)": {
        "notice": "Returns the address of the source for an asset address"
      },
      "setAssetSources(address[],address[])": {
        "notice": "Sets or replaces price sources of assets"
      }
    },
    "notice": "Contract to get asset prices, manage price sources - Use of Chainlink Aggregators as first source of price - Owned by the Hope governance",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1013,
        "contract": "contracts/HopeFallbackOracle.sol:HopeFallbackOracle",
        "label": "assetsSources",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(AggregatorInterface)1320)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorInterface)1320": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AggregatorInterface)1320)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorInterface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorInterface)1320"
      }
    }
  }
}