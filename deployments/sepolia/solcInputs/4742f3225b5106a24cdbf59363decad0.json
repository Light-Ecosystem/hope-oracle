{
  "language": "Solidity",
  "sources": {
    "contracts/dependencies/chainlink/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}"
    },
    "contracts/dependencies/chainlink/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}"
    },
    "contracts/dependencies/chainlink/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}"
    },
    "contracts/dependencies/chainlink/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}"
    },
    "contracts/dependencies/openzeppelin/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/dependencies/openzeppelin/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}"
    },
    "contracts/HOPEPriceFeed/HopeAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport {Ownable2Step} from '../dependencies/openzeppelin/Ownable2Step.sol';\nimport {AggregatorV2V3Interface} from '../dependencies/chainlink/AggregatorV2V3Interface.sol';\nimport {IHopeAggregator} from '../interfaces/IHopeAggregator.sol';\n\ncontract HopeAggregator is Ownable2Step, IHopeAggregator, AggregatorV2V3Interface {\n  uint256 public constant override version = 1;\n  uint8 public immutable override decimals;\n  string public override description; // 'HOPE/USD'\n  address internal transmitter;\n  uint80 internal roundId;\n\n  struct Transmission {\n    int192 answer; // 192 bits ought to be enough for anyone\n    uint64 timestamp;\n  }\n  mapping(uint80 /* aggregator round ID */ => Transmission) internal transmissions;\n\n  event TransmitterUpdated(address newTransmitter);\n\n  modifier isTransmitter() {\n    require(msg.sender == transmitter, 'HopeAggregator: caller is not the transmitter');\n    _;\n  }\n\n  constructor(uint8 _decimals, string memory _description, address _transmitter) {\n    decimals = _decimals;\n    description = _description;\n    transmitter = _transmitter;\n  }\n\n  function updateTransmitter(address newTransmitter) external onlyOwner {\n    transmitter = newTransmitter;\n    emit TransmitterUpdated(newTransmitter);\n  }\n\n  function transmit(uint256 _answer) external override isTransmitter {\n    roundId++;\n    int192 currentPrice = int192(int256(_answer));\n    transmissions[roundId] = Transmission(currentPrice, uint64(block.timestamp));\n    emit AnswerUpdated(currentPrice, roundId, uint64(block.timestamp));\n  }\n\n  function latestAnswer() external view override returns (int256) {\n    return transmissions[roundId].answer;\n  }\n\n  function latestTimestamp() external view override returns (uint256) {\n    return transmissions[roundId].timestamp;\n  }\n\n  function latestRound() external view override returns (uint256) {\n    return roundId;\n  }\n\n  function getAnswer(uint256 _roundId) external view override returns (int256) {\n    return transmissions[uint80(_roundId)].answer;\n  }\n\n  function getTimestamp(uint256 _roundId) external view override returns (uint256) {\n    return transmissions[uint80(_roundId)].timestamp;\n  }\n\n  function getRoundData(uint80 _roundId) external view override returns (uint80, int256, uint256, uint256, uint80) {\n    Transmission memory transmission = transmissions[_roundId];\n    return (_roundId, transmission.answer, transmission.timestamp, transmission.timestamp, _roundId);\n  }\n\n  function latestRoundData() external view override returns (uint80, int256, uint256, uint256, uint80) {\n    Transmission memory transmission = transmissions[roundId];\n    return (roundId, transmission.answer, transmission.timestamp, transmission.timestamp, roundId);\n  }\n}\n"
    },
    "contracts/HOPEPriceFeed/HopeAutomation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\nimport {Ownable2Step} from '../dependencies/openzeppelin/Ownable2Step.sol';\nimport {AutomationCompatibleInterface} from '../dependencies/chainlink/AutomationCompatibleInterface.sol';\nimport {IHOPEPriceFeed} from '../interfaces/IHOPEPriceFeed.sol';\nimport {IHopeAggregator} from '../interfaces/IHopeAggregator.sol';\n\ncontract HopeAutomation is Ownable2Step, AutomationCompatibleInterface {\n  uint256 internal constant THRESHOLD_FACTOR = 1e4;\n\n  address public priceFeed;\n  address public aggregator;\n\n  uint256 public heartbeat;\n  uint256 public deviationThreshold;\n\n  uint256 public lastPrice;\n  uint256 public lastTimestamp;\n\n  event HeartbeatUpdated(uint256 newHeartbeat);\n  event DeviationThresholdUpdated(uint256 newDeviationThreshold);\n  event HOPEPriceFeedUpdated(address newPriceFeed);\n  event AggregatorUpdated(address newAggregator);\n  event PriceUpdated(uint256 price, uint256 timestamp);\n\n  constructor(address _priceFeed, address _aggregator, uint256 _heartbeat, uint256 _deviationThreshold) {\n    _setHOPEPriceFeed(_priceFeed);\n    _setAggregator(_aggregator);\n    _setHeartbeat(_heartbeat);\n    _setDeviationThreshold(_deviationThreshold);\n    lastTimestamp = block.timestamp;\n  }\n\n  function setHeartbeat(uint256 _heartbeat) external onlyOwner {\n    _setHeartbeat(_heartbeat);\n  }\n\n  function setDeviationThreshold(uint256 _deviationThreshold) external onlyOwner {\n    _setDeviationThreshold(_deviationThreshold);\n  }\n\n  function setHOPEPriceFeed(address _priceFeed) external onlyOwner {\n    _setHOPEPriceFeed(_priceFeed);\n  }\n\n  function setAggregator(address _aggregator) external onlyOwner {\n    _setAggregator(_aggregator);\n  }\n\n  function _setHeartbeat(uint256 _heartbeat) internal {\n    heartbeat = _heartbeat;\n    emit HeartbeatUpdated(_heartbeat);\n  }\n\n  function _setDeviationThreshold(uint256 _deviationThreshold) internal {\n    deviationThreshold = _deviationThreshold;\n    emit DeviationThresholdUpdated(_deviationThreshold);\n  }\n\n  function _setHOPEPriceFeed(address _priceFeed) internal {\n    priceFeed = _priceFeed;\n    emit HOPEPriceFeedUpdated(_priceFeed);\n  }\n\n  function _setAggregator(address _aggregator) internal {\n    aggregator = _aggregator;\n    emit AggregatorUpdated(_aggregator);\n  }\n\n  function checkUpkeep(\n    bytes calldata /*checkData*/\n  ) external view override returns (bool upkeepNeeded, bytes memory /*performData*/) {\n    (, upkeepNeeded) = _checkUpKeep();\n  }\n\n  function performUpkeep(bytes memory /*performData*/) external override {\n    (uint256 price, bool upkeepNeeded) = _checkUpKeep();\n    require(upkeepNeeded, 'HopeAutomation: upkeep not needed');\n    lastPrice = price;\n    lastTimestamp = block.timestamp;\n    IHopeAggregator(aggregator).transmit(price);\n\n    emit PriceUpdated(price, block.timestamp);\n  }\n\n  function _checkUpKeep() internal view returns (uint256 price, bool upkeepNeeded) {\n    price = _getPrice();\n    upkeepNeeded = price > 0;\n    bool thresholdMet;\n    unchecked {\n      upkeepNeeded = upkeepNeeded && block.timestamp - lastTimestamp >= heartbeat;\n      if (price >= lastPrice) {\n        thresholdMet = price - lastPrice >= (deviationThreshold * lastPrice) / THRESHOLD_FACTOR;\n      } else {\n        thresholdMet = lastPrice - price >= (deviationThreshold * lastPrice) / THRESHOLD_FACTOR;\n      }\n      upkeepNeeded = upkeepNeeded && thresholdMet;\n    }\n  }\n\n  function _getPrice() internal view returns (uint256 price) {\n    price = IHOPEPriceFeed(priceFeed).latestAnswer();\n  }\n}\n"
    },
    "contracts/HOPEPriceFeed/HOPEPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity 0.8.17;\n\nimport {Ownable2Step} from '../dependencies/openzeppelin/Ownable2Step.sol';\nimport {AggregatorV2V3Interface} from '../dependencies/chainlink/AggregatorV2V3Interface.sol';\nimport {IHOPE} from '../interfaces/IHOPE.sol';\nimport {IHOPEPriceFeed} from '../interfaces/IHOPEPriceFeed.sol';\n\ncontract HOPEPriceFeed is Ownable2Step, IHOPEPriceFeed {\n  uint256 private constant K_FACTOR = 1e20;\n  uint256 private constant PRICE_SCALE = 1e8;\n  uint256 public immutable K; // 1080180484347501\n  address public immutable ETH_ADDRESS; // 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n  address public immutable BTC_ADDRESS; // 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\n  address public immutable HOPE_ADDRESS; // 0xc353Bf07405304AeaB75F4C2Fac7E88D6A68f98e\n\n  struct TokenConfig {\n    AggregatorV2V3Interface priceFeed;\n    uint256 factor;\n    bool isExist;\n  }\n  address[] private reserveTokens;\n  mapping(address => TokenConfig) private reserveTokenConfigs;\n\n  event ReserveUpdate(address[] tokens, address[] priceFeed, uint256[] factors);\n\n  constructor(address _ethMaskAddress, address _btcMaskAddress, address _hopeAddress, uint256 _k) {\n    ETH_ADDRESS = _ethMaskAddress;\n    BTC_ADDRESS = _btcMaskAddress;\n    HOPE_ADDRESS = _hopeAddress;\n    K = _k;\n  }\n\n  function setReserveTokens(\n    address[] memory tokens,\n    address[] memory priceFeeds,\n    uint256[] memory factors\n  ) external onlyOwner {\n    require(tokens.length == priceFeeds.length, 'HOPEPriceFeeds: Invalid input');\n    require(tokens.length == factors.length, 'HOPEPriceFeeds: Invalid input');\n\n    for (uint256 i = 0; i < tokens.length; i++) {\n      if (!reserveTokenConfigs[tokens[i]].isExist) {\n        reserveTokens.push(tokens[i]);\n      }\n      reserveTokenConfigs[tokens[i]] = TokenConfig(AggregatorV2V3Interface(priceFeeds[i]), factors[i], true);\n    }\n\n    emit ReserveUpdate(tokens, priceFeeds, factors);\n  }\n\n  function latestAnswer() external view override returns (uint256) {\n    uint256 hopeSupply = getHOPETotalSupply();\n    uint256 reserveTotalValue;\n    uint256 hopePrice;\n\n    unchecked {\n      for (uint256 i = 0; i < reserveTokens.length; i++) {\n        TokenConfig memory config = reserveTokenConfigs[reserveTokens[i]];\n        uint256 reserveInToken = _calculateReserveAmount(hopeSupply, config);\n        uint256 reserveValueInToken = _calculateReserveValue(reserveInToken, config);\n        reserveTotalValue += reserveValueInToken;\n      }\n\n      hopePrice = reserveTotalValue / hopeSupply;\n    }\n\n    if (hopePrice >= PRICE_SCALE) return PRICE_SCALE;\n    return hopePrice;\n  }\n\n  function _calculateReserveAmount(uint256 hopeSupply, TokenConfig memory config) internal view returns (uint256) {\n    unchecked {\n      uint256 reserveAmount = (hopeSupply * K * config.factor) / K_FACTOR;\n      return reserveAmount;\n    }\n  }\n\n  function _calculateReserveValue(uint256 reserveAmount, TokenConfig memory config) internal view returns (uint256) {\n    uint256 reservePrice = uint256(config.priceFeed.latestAnswer());\n    uint256 reserveDecimals = uint256(config.priceFeed.decimals());\n    unchecked {\n      uint256 reserveValue = (reserveAmount * reservePrice * PRICE_SCALE) / (10 ** reserveDecimals);\n      return reserveValue;\n    }\n  }\n\n  function getReservePrice(address token) external view returns (uint256) {\n    TokenConfig memory config = reserveTokenConfigs[token];\n    return uint256(config.priceFeed.latestAnswer());\n  }\n\n  function getHOPETotalSupply() public view returns (uint256) {\n    return IHOPE(HOPE_ADDRESS).totalSupply();\n  }\n\n  function getReserveTokens() external view returns (address[] memory) {\n    return reserveTokens;\n  }\n\n  function getReserveTokenConfig(address token) external view returns (address, uint256, bool) {\n    TokenConfig memory config = reserveTokenConfigs[token];\n    return (address(config.priceFeed), config.factor, config.isExist);\n  }\n}\n"
    },
    "contracts/interfaces/IHOPE.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IHOPE {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n}"
    },
    "contracts/interfaces/IHopeAggregator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IHopeAggregator {\n    function transmit(uint256 _answer) external;\n}"
    },
    "contracts/interfaces/IHOPEPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IHOPEPriceFeed {\n    function latestAnswer() external view returns (uint256);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100000
    },
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}